%% Will Davis
% ColoradoStateUniversity

function [L, U, P] = luFactor(A)
% luFactor(A)
%	LU decomposition with pivotiing
% inputs:
%	A = coefficient matrix
% outputs:
%	L = lower triangular matrix
%	U = upper triangular matrix
%       P = the permutation matrix
[m,n] = size(A);
P = eye(n);
L = eye(n);
U = A;
count = eye(n);



if m ~= n
    error('Matrix must be square')
end

%% Problem

column = A(:,1);
column = abs(column);
[Value,location] = max(column);
U([1 location],:) = U([location 1],:)
P([1 location],:) = P([location 1],:)

for E1 = 1:n-1

    for E2 = E1+1 : n
        L(E2,E1) = U(E2,E1)/U(E1,E1);
        U(E2,E1+1:n) = U(E2,E1+1:n) - L(E2,E1) * U(E1,E1+1:n);
        U(E2,E1) = 0;
    end
end

U = U
L = L
P = P
